@startuml
abstract class com.example.fabric.Shape {
# Color color
+ {abstract}void draw(GraphicsContext)
+ {abstract}String descriptor()
}


class com.example.fabric.ShapeFactory {
+ Shape createPolygon(int,Color)
}

class com.example.fabric.Angle {
+ void draw(GraphicsContext)
+ String descriptor()
}

class com.example.fabric.Triangle {
+ void draw(GraphicsContext)
+ String descriptor()
}

class com.example.fabric.Straight {
+ void draw(GraphicsContext)
+ String descriptor()
}

class com.example.fabric.Square {
+ void draw(GraphicsContext)
+ String descriptor()
}

class com.example.fabric.Circle {
+ void draw(GraphicsContext)
+ String descriptor()
}

class com.example.fabric.Main {
+ void start(Stage)
+ {static} void main(String[])
}

class com.example.fabric.Pentagon {
+ void draw(GraphicsContext)
+ String descriptor()
}

class com.example.fabric.Controller {
- TextField sidesField
- MenuButton colorMenu
- Canvas canvas
- Label descriptionLabel
- ShapeFactory shapeFactory
- Color selectedColor
+ void initialize()
+ void drawShape()
}




com.example.fabric.Shape <|-- com.example.fabric.Angle
com.example.fabric.Shape <|-- com.example.fabric.Triangle
com.example.fabric.Shape <|-- com.example.fabric.Straight
com.example.fabric.Shape <|-- com.example.fabric.Square
com.example.fabric.Shape <|-- com.example.fabric.Circle
javafx.application.Application <|-- com.example.fabric.Main
com.example.fabric.Shape <|-- com.example.fabric.Pentagon
@enduml